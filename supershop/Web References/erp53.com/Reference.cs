//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace supershop.erp53.com {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WinRegistrationSoap", Namespace="http://tempuri.org/")]
    public partial class WinRegistration : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback WinRegOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WinRegistration() {
            this.Url = global::supershop.Properties.Settings.Default.Adv_POS_erp53_com_WinRegistration;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event WinRegCompletedEventHandler WinRegCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/WinReg", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool WinReg(
                    string Atntb, 
                    string Aunb, 
                    string Aupb, 
                    string AComb, 
                    string comp2, 
                    string comp3, 
                    string DefaultLA, 
                    string compAD, 
                    string compPH, 
                    string CompWeb, 
                    string ULast, 
                    string UAD, 
                    string UPH, 
                    string UBD, 
                    string UEM, 
                    string UT) {
            object[] results = this.Invoke("WinReg", new object[] {
                        Atntb,
                        Aunb,
                        Aupb,
                        AComb,
                        comp2,
                        comp3,
                        DefaultLA,
                        compAD,
                        compPH,
                        CompWeb,
                        ULast,
                        UAD,
                        UPH,
                        UBD,
                        UEM,
                        UT});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void WinRegAsync(
                    string Atntb, 
                    string Aunb, 
                    string Aupb, 
                    string AComb, 
                    string comp2, 
                    string comp3, 
                    string DefaultLA, 
                    string compAD, 
                    string compPH, 
                    string CompWeb, 
                    string ULast, 
                    string UAD, 
                    string UPH, 
                    string UBD, 
                    string UEM, 
                    string UT) {
            this.WinRegAsync(Atntb, Aunb, Aupb, AComb, comp2, comp3, DefaultLA, compAD, compPH, CompWeb, ULast, UAD, UPH, UBD, UEM, UT, null);
        }
        
        /// <remarks/>
        public void WinRegAsync(
                    string Atntb, 
                    string Aunb, 
                    string Aupb, 
                    string AComb, 
                    string comp2, 
                    string comp3, 
                    string DefaultLA, 
                    string compAD, 
                    string compPH, 
                    string CompWeb, 
                    string ULast, 
                    string UAD, 
                    string UPH, 
                    string UBD, 
                    string UEM, 
                    string UT, 
                    object userState) {
            if ((this.WinRegOperationCompleted == null)) {
                this.WinRegOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWinRegOperationCompleted);
            }
            this.InvokeAsync("WinReg", new object[] {
                        Atntb,
                        Aunb,
                        Aupb,
                        AComb,
                        comp2,
                        comp3,
                        DefaultLA,
                        compAD,
                        compPH,
                        CompWeb,
                        ULast,
                        UAD,
                        UPH,
                        UBD,
                        UEM,
                        UT}, this.WinRegOperationCompleted, userState);
        }
        
        private void OnWinRegOperationCompleted(object arg) {
            if ((this.WinRegCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WinRegCompleted(this, new WinRegCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    public delegate void WinRegCompletedEventHandler(object sender, WinRegCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3056.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WinRegCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WinRegCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591